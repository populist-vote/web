schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AddressExtendedMNResult {
  countyCode: String
  countyCommissionerDistrict: String
  countyName: String
  judicialDistrict: String
  precinctCode: String
  precinctName: String
  schoolDistrictName: String
  schoolDistrictNumber: String
  schoolSubdistrictCode: String
  schoolSubdistrictName: String
  votingTabulationDistrictId: String
}

input AddressInput {
  city: String!
  congressionalDistrict: String
  coordinates: Coordinates
  country: String!
  county: String
  line1: String!
  line2: String
  postalCode: String!
  state: State!
  stateHouseDistrict: String
  stateSenateDistrict: String
}

type AddressResult {
  city: String!
  country: String!
  line1: String!
  line2: String
  postalCode: String!
  state: State!
}

type Amendment {
  adopted: Int!
  amendmentId: Int!
  chamber: String!
  chamberId: Int!
  date: String!
  description: String!
  mime: String!
  mimeId: Int!
  stateLink: String!
  title: String!
  url: String!
}

enum ArgumentPosition {
  NEUTRAL
  OPPOSE
  SUPPORT
}

type ArgumentResult {
  author: AuthorResult!
  authorId: ID!
  authorType: AuthorType!
  body: String
  id: ID!
  position: String!
  title: String!
  votes: Int!
}

type AuthTokenResult {
  email: String!
  id: ID!
  organizationId: ID
  role: Role!
  userProfile: UserResult!
  username: String!
}

union AuthorResult = OrganizationResult | PoliticianResult

enum AuthorType {
  ORGANIZATION
  POLITICIAN
}

type BallotMeasureResult {
  arguments: [ArgumentResult!]!
  ballotMeasureCode: String!
  ballotState: State!
  definitions: String!
  description: String
  electionId: ID!
  fullTextUrl: String
  id: ID!
  issueTags: [IssueTagResult!]!
  measureType: String!
  officialSummary: String
  populistSummary: String
  slug: String!
  status: BallotMeasureStatus!
  title: String!
}

input BallotMeasureSearch {
  ballotState: State
  slug: String
  status: BallotMeasureStatus
  title: String
}

enum BallotMeasureStatus {
  BECAME_LAW
  FAILED
  GATHERING_SIGNATURES
  INTRODUCED
  IN_CONSIDERATION
  ON_THE_BALLOT
  PROPOSED
  UNKNOWN
}

input BeginUserRegistrationInput {
  address: AddressInput!
  email: String!
  password: String!
}

type Bill {
  amendments: [Amendment!]!
  billId: Int!
  billNumber: String!
  billType: String!
  billTypeId: String!
  body: String!
  bodyId: Int!
  calendar: [Calendar!]!
  changeHash: String!
  committee: JSON!
  completed: Int!
  currentBody: String!
  currentBodyId: Int!
  history: [History!]!
  pendingCommitteeId: Int!
  progress: [Progress!]!
  referrals: [Referral!]
  sasts: [Sast!]!
  session: Session!
  sessionId: Int!
  sponsors: [Sponsor!]!
  state: String!
  stateId: Int!
  stateLink: String!
  status: Int!
  statusDate: String
  statusType: String!
  subjects: [Subject!]!
  supplements: [Supplement!]!
  texts: [Text!]!
  title: String!
  url: String!
  votes: [Vote!]!
}

input BillFilter {
  issueTag: String
  politicalScope: PoliticalScope
  query: String
  state: State
  status: BillStatus
  year: Int
}

type BillResult {
  arguments: [ArgumentResult!]!
  billNumber: String!
  billType: BillType!
  chamber: Chamber
  description: String
  fullTextUrl: String
  history: JSON!
  id: ID!
  issueTags: [IssueTagResult!]!
  legiscanBillId: Int
  legiscanCommitteeName: String
  legiscanData: Bill
  officialSummary: String
  politicalScope: PoliticalScope!
  populistSummary: String
  publicVotes: PublicVotes!
  session: SessionResult
  sessionId: ID
  slug: String!
  sponsors: [PoliticianResult!]!
  state: State
  status: BillStatus!
  title: String!
  usersVote: ArgumentPosition
  votesmartBillId: Int
}

type BillResultConnection {
  """A list of edges."""
  edges: [BillResultEdge!]!
  """A list of nodes."""
  nodes: [BillResult!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total result set count"""
  totalCount: Int!
}

"""An edge in a connection."""
type BillResultEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: BillResult!
}

input BillSort {
  popularity: PopularitySort
}

enum BillStatus {
  BECAME_LAW
  FAILED
  INTRODUCED
  IN_CONSIDERATION
  UNKNOWN
  VETOED
}

enum BillType {
  """New Hampshire"""
  ADDRESS
  """Most states have these types"""
  BILL
  """DC City Council"""
  CEREMONIAL_RESOLUTION
  CONCURRENT_MEMORIAL
  CONCURRENT_RESOLUTION
  CONCURRENT_STUDY_REQUEST
  CONSTITUTIONAL_AMENDMENT
  EXECUTIVE_ORDER
  JOINT_MEMORIAL
  """Some states have these types"""
  JOINT_RESOLUTION
  JOINT_SESSION_RESOLUTION
  MEMORIAL
  NONE
  PROCLAMATION
  REMONSTRATION
  REPEAL_BILL
  RESOLUTION
  STUDY_REQUEST
}

type Calendar {
  date: String!
  description: String!
  location: String!
  time: String!
  typeField: String!
  typeId: Int!
}

type Candidate {
  birthDate: String!
  birthPlace: String!
  candidateId: String!
  congMembership: JSON!
  crpId: String!
  education: JSON!
  family: String!
  firstName: String!
  gender: String!
  homeCity: String!
  homeState: String!
  lastName: String!
  middleName: String!
  nickName: String!
  orgMembership: JSON!
  photo: String!
  political: JSON!
  preferredName: String!
  profession: JSON!
  pronunciation: String!
  religion: String!
  specialMsg: String!
  suffix: String!
}

enum Chamber {
  ASSEMBLY
  HOUSE
  LEGISLATURE
  SENATE
}

enum Chambers {
  ALL
  HOUSE
  SENATE
}

type CommitteeResult {
  chairId: ID
  description: String!
  id: ID!
  legiscanCommitteeId: Int
  name: String!
  slug: String!
  state: State
}

input Coordinates {
  latitude: Float!
  longitude: Float!
}

input CreateArgumentInput {
  authorId: String!
  body: String
  position: ArgumentPosition!
  title: String!
}

input CreateOrConnectIssueTagInput {
  connect: [String!]
  create: [UpsertIssueTagInput!]
}

input CreateOrConnectOrganizationInput {
  connect: [String!]
  create: [UpsertOrganizationInput!]
}

input CreateOrConnectPoliticianInput {
  connect: [String!]
  create: [UpsertPoliticianInput!]
}

input CreateUserInput {
  email: String!
  organizationId: UUID
  password: String!
  role: Role
  username: String!
}

type CreateUserResult {
  id: ID!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type DeleteArgumentResult {
  id: String!
}

type DeleteBallotMeasureResult {
  id: String!
}

type DeleteBillResult {
  id: String!
}

type DeleteElectionResult {
  id: String!
}

type DeleteEmbedResult {
  id: String!
}

type DeleteIssueTagResult {
  id: String!
}

type DeleteOfficeResult {
  id: String!
}

type DeleteOrganizationResult {
  id: String!
}

type DeletePoliticianResult {
  id: String!
}

type DeleteRaceResult {
  id: String!
}

type DeleteVotingGuideResult {
  id: ID!
}

enum District {
  CITY
  COUNTY
  HOSPITAL
  JUDICIAL
  SCHOOL
  SOIL_AND_WATER
  STATE_HOUSE
  STATE_SENATE
  US_CONGRESSIONAL
}

type DonationsByIndustry {
  cycle: Int!
  lastUpdated: NaiveDate!
  sectors: [Sector!]!
  source: String!
}

type DonationsSummary {
  cashOnHand: Float!
  debt: Float!
  lastUpdated: NaiveDate!
  source: String!
  spent: Float!
  totalRaised: Float!
}

type ElectionResult {
  description: String
  electionDate: NaiveDate!
  id: ID!
  races: [RaceResult!]!
  """Show races relevant to the user based on their address"""
  racesByUserDistricts: [RaceResult!]!
  racesByVotingGuide(votingGuideId: ID!): [RaceResult!]!
  slug: String!
  state: State
  title: String!
}

enum ElectionScope {
  CITY
  COUNTY
  DISTRICT
  NATIONAL
  STATE
}

input ElectionSearchInput {
  slug: String
  state: State
  title: String
}

type EmbedResult {
  attributes: JSON!
  bill: BillResult
  createdAt: DateTime!
  createdBy: UserResult!
  createdById: ID!
  description: String
  id: ID!
  name: String!
  organizationId: ID!
  politician: PoliticianResult
  populistUrl: String!
  updatedAt: DateTime!
  updatedBy: UserResult!
  updatedById: ID!
}

type Endorsements {
  organizations: [OrganizationResult!]!
  politicians: [PoliticianResult!]!
}

type GeneralInfo {
  linkBack: String!
  title: String!
}

type GetCandidateBioResponse {
  candidate: Candidate!
  generalInfo: GeneralInfo!
  office: Office
}

type Heartbeat {
  utc: DateTime!
}

type History {
  action: String!
  chamber: String!
  chamberId: Int!
  date: String!
  importance: Int!
}

type IssueTagResult {
  ballotMeasures: [BallotMeasureResult!]!
  bills: [BillResult!]!
  description: String
  id: ID!
  name: String!
  organizations: [OrganizationResult!]!
  politicians: [PoliticianResult!]!
  slug: String!
}

input IssueTagSearch {
  name: String
}

"""A scalar that can represent any JSON value."""
scalar JSON

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type LoginResult {
  userId: ID!
}

type Mutation {
  beginUserRegistration(input: BeginUserRegistrationInput!): LoginResult!
  confirmUserEmail(confirmationToken: String!): Boolean!
  createUser(input: CreateUserInput!): CreateUserResult!
  deleteAccount: ID!
  deleteAccountByEmail(email: String!): ID!
  deleteArgument(id: String!): DeleteArgumentResult!
  deleteBallotMeasure(id: String!): DeleteBallotMeasureResult!
  deleteBill(id: String!): DeleteBillResult!
  deleteElection(id: String!): DeleteElectionResult!
  deleteEmbed(id: UUID!): DeleteEmbedResult!
  deleteIssueTag(id: String!): DeleteIssueTagResult!
  deleteOffice(id: String!): DeleteOfficeResult!
  deleteOrganization(id: String!): DeleteOrganizationResult!
  deletePolitician(id: String!): DeletePoliticianResult!
  deleteProfilePicture: Boolean!
  deleteRace(id: String!): DeleteRaceResult!
  deleteVotingGuide(id: ID!): DeleteVotingGuideResult!
  deleteVotingGuideCandidateNote(candidateId: ID!, votingGuideId: ID!): VotingGuideCandidateResult!
  downvoteArgument(argumentId: ID!, populistUserId: ID!): Boolean!
  login(input: LoginInput!): LoginResult!
  logout: Boolean!
  requestPasswordReset(email: String!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  updateAddress(address: AddressInput!): AddressResult!
  updateArgument(id: ID!, input: UpdateArgumentInput!): ArgumentResult!
  updateEmail(email: String!): UpdateEmailResult!
  updateFirstAndLastName(firstName: String!, lastName: String!): UpdateNameResult!
  updatePassword(input: UpdatePasswordInput!): Boolean!
  updateUsername(username: String!): UpdateUsernameResult!
  uploadProfilePicture(file: Upload!): String!
  upsertBallotMeasure(electionId: UUID!, input: UpsertBallotMeasureInput!): BallotMeasureResult!
  upsertBill(input: UpsertBillInput!): BillResult!
  upsertBillPublicVote(billId: ID!, position: ArgumentPosition!, userId: ID!): PublicVotes!
  upsertElection(input: UpsertElectionInput!): ElectionResult!
  upsertEmbed(input: UpsertEmbedInput!): EmbedResult!
  upsertIssueTag(input: UpsertIssueTagInput!): IssueTagResult!
  upsertOffice(input: UpsertOfficeInput!): OfficeResult!
  upsertOrganization(input: UpsertOrganizationInput!): OrganizationResult!
  upsertPolitician(input: UpsertPoliticianInput!): PoliticianResult!
  upsertRace(input: UpsertRaceInput!): RaceResult!
  upsertVotingGuide(input: UpsertVotingGuideInput!): VotingGuideResult!
  upsertVotingGuideCandidate(input: UpsertVotingGuideCandidateInput!): VotingGuideCandidateResult!
  upvoteArgument(argumentId: ID!, populistUserId: ID!): Boolean!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

type Office {
  district: String!
  districtId: String!
  firstElect: String!
  lastElect: String!
  name: [String!]!
  nextElect: String!
  parties: String!
  shortTitle: String!
  stateId: String!
  status: String!
  termEnd: String!
  termStart: String!
  title: String!
  typeField: String!
}

type OfficeResult {
  chamber: Chamber
  county: String
  district: String
  districtType: District
  electionScope: ElectionScope!
  hospitalDistrict: String
  id: ID!
  incumbent: PoliticianResult
  municipality: String
  name: String
  officeType: String
  politicalScope: PoliticalScope!
  priority: Int
  schoolDistrict: String
  seat: String
  slug: String!
  state: State
  subtitle: String
  subtitleShort: String
  termLength: Int
  title: String!
}

input OfficeSearch {
  politicalScope: PoliticalScope
  query: String
  state: State
}

type OrganizationAssets {
  thumbnailImage160: String
  thumbnailImage400: String
}

type OrganizationPoliticianNoteResult {
  createdAt: DateTime!
  electionId: ID!
  id: ID!
  issueTagIds: [ID!]!
  issueTags: [IssueTagResult!]!
  notes: JSON!
  organization: OrganizationResult!
  organizationId: ID!
  politician: PoliticianResult!
  politicianId: ID!
  updatedAt: DateTime!
}

type OrganizationResult {
  assets: OrganizationAssets!
  description: String
  email: String
  facebookUrl: String
  headquartersAddressId: ID
  headquartersPhone: String
  id: ID!
  instagramUrl: String
  issueTags: [IssueTagResult!]!
  name: String!
  politicianNotes(electionId: ID!): [OrganizationPoliticianNoteResult!]!
  slug: String!
  taxClassification: String
  thumbnailImageUrl: String
  twitterUrl: String
  votesmartSigId: Int
  websiteUrl: String
}

type OrganizationResultConnection {
  """A list of edges."""
  edges: [OrganizationResultEdge!]!
  """A list of nodes."""
  nodes: [OrganizationResult!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total result set count"""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationResultEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: OrganizationResult!
}

input OrganizationSearch {
  name: String
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PasswordEntropyResult {
  message: String
  score: Int!
  valid: Boolean!
}

enum PoliticalParty {
  AMERICAN_CONSTITUTION
  APPROVAL_VOTING
  COLORADO_CENTER
  CONSTITUTION
  DEMOCRATIC
  DEMOCRATIC_FARMER_LABOR
  FREEDOM
  GRASSROOTS_LEGALIZE_CANNABIS
  GREEN
  INDEPENDENT
  LEGAL_MARIJUANA_NOW
  LIBERTARIAN
  REPUBLICAN
  SOCIALIST_WORKERS
  UNAFFILIATED
  UNITY
  UNKNOWN
}

enum PoliticalScope {
  FEDERAL
  LOCAL
  STATE
}

type PoliticianAssets {
  thumbnailImage160: String
  thumbnailImage400: String
}

input PoliticianFilter {
  chambers: Chambers
  homeState: State
  party: PoliticalParty
  politicalScope: PoliticalScope
  query: String
}

type PoliticianResult {
  age: Int
  assets: PoliticianAssets!
  biography: String
  biographySource: String
  campaignWebsiteUrl: String
  crpCandidateId: String
  currentOffice: OfficeResult
  dateOfBirth: NaiveDate
  donationsByIndustry: DonationsByIndustry
  donationsSummary: DonationsSummary
  email: String
  endorsements: Endorsements!
  facebookUrl: String
  firstName: String!
  fullName: String!
  homeState: State
  id: ID!
  instagramUrl: String
  issueTags: [IssueTagResult!]!
  lastName: String!
  linkedinUrl: String
  middleName: String
  officeId: ID
  officialWebsiteUrl: String
  party: PoliticalParty
  phone: String
  preferredName: String
  raceLosses: Int
  raceWins: Int
  """Leverages Votesmart ratings data for the time being"""
  ratings(after: String, before: String, first: Int, last: Int): RatingResultConnection!
  slug: String!
  sponsoredBills(after: String, before: String, first: Int, last: Int): BillResultConnection!
  suffix: String
  thumbnailImageUrl: String
  tiktokUrl: String
  twitterUrl: String
  upcomingRace: RaceResult
  upcomingRaceId: ID
  votes(raceId: UUID!): Int
  votesmartCandidateBio: GetCandidateBioResponse
  votesmartCandidateId: Int
  votesmartCandidateRatings: [VsRating!]!
  """
  Calculates the total years a politician has been in office using
  the votesmart politicial experience array.  Does not take into account
  objects where the politician is considered a 'candidate'
  """
  yearsInPublicOffice: Int
  youtubeUrl: String
}

type PoliticianResultConnection {
  """A list of edges."""
  edges: [PoliticianResultEdge!]!
  """A list of nodes."""
  nodes: [PoliticianResult!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total result set count"""
  totalCount: Int!
}

"""An edge in a connection."""
type PoliticianResultEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: PoliticianResult!
}

enum PopularitySort {
  MOST_OPPOSED
  MOST_POPULAR
  MOST_SUPPORTED
}

type Progress {
  date: String!
  event: Int!
}

type PublicVotes {
  neutral: Int
  oppose: Int
  support: Int
}

type Query {
  allBallotMeasures: [BallotMeasureResult!]!
  allIssueTags: [IssueTagResult!]!
  ballotMeasures(
    """Search by voteStatus, name, or slug"""
    search: BallotMeasureSearch!
  ): [BallotMeasureResult!]!
  billById(id: ID!): BillResult
  billBySlug(slug: String!): BillResult
  """Returns all committees that have an associated bill"""
  billCommittees: [CommitteeResult!]!
  """Returns all issue tags that have an associated bill"""
  billIssueTags: [IssueTagResult!]!
  """Returns all session years that have an associated bill"""
  billYears: [Int!]!
  bills(after: String, before: String, filter: BillFilter, first: Int, last: Int, sort: BillSort): BillResultConnection!
  """
  Provides current user based on JWT found in client's access_token cookie
  """
  currentUser: AuthTokenResult
  electionById(id: ID!): ElectionResult!
  electionBySlug(slug: String!): ElectionResult!
  """Returns a single voting guide for the given election and user"""
  electionVotingGuideByUserId(
    """Election ID"""
    electionId: ID!
    """User ID"""
    userId: ID!
  ): VotingGuideResult
  elections(
    """Search by slug or title"""
    search: ElectionSearchInput
  ): [ElectionResult!]!
  electionsByUser: [ElectionResult!]!
  embedById(id: ID!): EmbedResult!
  embedsByOrganization(organizationId: ID!): [EmbedResult!]!
  """Returns `true` to indicate the GraphQL server is reachable"""
  health: Boolean!
  issueTagBySlug(
    """Search issue tag by slug"""
    slug: String!
  ): IssueTagResult!
  issueTags(
    """Search by issue tag name"""
    search: IssueTagSearch!
  ): [IssueTagResult!]!
  nextElection: ElectionResult!
  officeById(id: String!): OfficeResult!
  officeBySlug(slug: String!): OfficeResult!
  offices(
    """Search by office title or state"""
    search: OfficeSearch
  ): [OfficeResult!]!
  organizationById(id: ID!): OrganizationResult!
  organizationBySlug(slug: String!): OrganizationResult!
  organizations(
    after: String
    before: String
    first: Int
    last: Int
    """Search by organization name"""
    search: OrganizationSearch
  ): OrganizationResultConnection!
  politicianBySlug(slug: String!): PoliticianResult
  politicians(after: String, before: String, filter: PoliticianFilter, first: Int, last: Int): PoliticianResultConnection!
  popularBills(after: String, before: String, first: Int, last: Int): BillResultConnection!
  raceById(id: String!): RaceResult!
  raceBySlug(slug: String!): RaceResult!
  races(filter: RaceFilter): [RaceResult!]!
  """Get all users"""
  userCount(filter: UserCountFilter): Int
  """Publicly accessible user information"""
  userProfile(userId: ID!): UserResult!
  """Validate that a user does not already exist with this email"""
  validateEmailAvailable(email: String!): Boolean!
  validatePasswordEntropy(password: String!): PasswordEntropyResult!
  votingGuideById(
    """Voting guide id"""
    id: ID!
  ): VotingGuideResult!
  votingGuidesByIds(ids: [ID!]!): [VotingGuideResult!]!
  votingGuidesByUserId(
    """User id"""
    userId: ID!
  ): [VotingGuideResult!]!
}

type RaceCandidateResult {
  candidateId: ID!
  votePercentage: Float
  votes: Int
}

input RaceFilter {
  electionScope: ElectionScope
  officeTitles: [String!]
  politicalScope: PoliticalScope
  state: State
}

type RaceResult {
  ballotpediaLink: String
  candidates: [PoliticianResult!]!
  description: String
  earlyVotingBeginsDate: NaiveDate
  electionDate: NaiveDate
  electionId: ID
  id: ID!
  office: OfficeResult!
  officeId: ID!
  officialWebsite: String
  party: PoliticalParty
  raceType: RaceType!
  results: RaceResultsResult!
  slug: String!
  state: State
  title: String!
}

type RaceResultsResult {
  totalVotes: Int
  votesByCandidate: [RaceCandidateResult!]!
  winners: [PoliticianResult!]
}

enum RaceType {
  GENERAL
  PRIMARY
}

type RatingResult {
  organization: OrganizationResult
  vsRating: VsRating!
}

type RatingResultConnection {
  """A list of edges."""
  edges: [RatingResultEdge!]!
  """A list of nodes."""
  nodes: [RatingResult!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total result set count"""
  totalCount: Int!
}

"""An edge in a connection."""
type RatingResultEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: RatingResult!
}

type Referral {
  chamber: String!
  chamberId: Int!
  committeeId: Int!
  date: String!
  name: String!
}

input ResetPasswordInput {
  newPassword: String!
  resetToken: String!
}

enum Role {
  BASIC
  PREMIUM
  STAFF
  SUPERUSER
}

type RollCall {
  absent: Int!
  billId: Int!
  chamber: String!
  chamberId: Int!
  date: String!
  desc: String!
  nay: Int!
  nv: Int!
  passed: Int!
  rollCallId: Int!
  total: Int!
  votes: [Vote!]!
  yea: Int!
}

type Sast {
  sastBillId: Int!
  sastBillNumber: String!
  typeField: String!
  typeId: Int!
}

type Sector {
  id: String!
  individuals: Int!
  name: String!
  pacs: Int!
  total: Int!
}

type Session {
  sessionId: Int!
  sessionName: String!
  sessionTitle: String!
  special: Int!
  yearEnd: Int!
  yearStart: Int!
}

type SessionResult {
  congressName: String!
  description: String!
  endDate: NaiveDate
  name: String!
  startDate: NaiveDate
  state: State
}

type Sponsor {
  ballotpedia: String!
  committeeId: JSON!
  committeeSponsor: Int!
  district: String!
  firstName: String!
  ftmEid: Int!
  lastName: String!
  middleName: String!
  name: String!
  nickname: String!
  opensecretsId: String!
  party: String!
  partyId: JSON!
  peopleId: Int!
  personHash: String!
  role: String!
  roleId: Int!
  sponsorOrder: Int!
  sponsorTypeId: Int!
  suffix: String!
  votesmartId: Int!
}

enum State {
  AK
  AL
  AR
  AS
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  FM
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MH
  MI
  MN
  MO
  MP
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  PW
  RI
  SC
  SD
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}

type Subject {
  subjectId: Int!
  subjectName: String!
}

type Subscription {
  """
  Heartbeat, containing the UTC timestamp of the last server-sent payload
  """
  heartbeat(interval: Int! = 1000): Heartbeat!
}

type Supplement {
  date: String!
  description: String!
  mime: String!
  mimeId: Int!
  stateLink: String!
  supplementId: Int!
  title: String!
  typeField: String!
  typeId: Int!
  url: String!
}

type Text {
  date: String!
  docId: Int!
  mime: String!
  mimeId: Int!
  stateLink: String!
  textSize: Int!
  typeField: String!
  typeId: Int!
  url: String!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateArgumentInput {
  body: String
  position: ArgumentPosition!
  title: String
}

type UpdateEmailResult {
  email: String!
}

type UpdateNameResult {
  firstName: String
  lastName: String
}

input UpdatePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type UpdateUsernameResult {
  username: String!
}

scalar Upload

input UpsertBallotMeasureInput {
  ballotMeasureCode: String
  ballotState: State
  definitions: String
  description: String
  fullTextUrl: String
  id: UUID
  measureType: String
  officialSummary: String
  populistSummary: String
  slug: String
  status: BallotMeasureStatus
  title: String
}

input UpsertBillInput {
  arguments: [CreateArgumentInput!]
  attributes: JSON
  billNumber: String!
  billType: String
  chamber: Chamber
  description: String
  fullTextUrl: String
  history: JSON
  id: UUID
  legiscanBillId: Int
  legiscanCommittee: String
  legiscanCommitteeId: Int
  legiscanData: JSON
  legiscanLastAction: String
  legiscanLastActionDate: NaiveDate
  legiscanSessionId: Int
  officialSummary: String
  politicalScope: PoliticalScope
  populistSummary: String
  sessionId: UUID!
  slug: String
  state: State
  status: BillStatus!
  title: String
  votesmartBillId: Int
}

input UpsertElectionInput {
  description: String
  """Must use format YYYY-MM-DD"""
  electionDate: NaiveDate
  id: UUID
  municipality: String
  slug: String
  state: State
  title: String
}

input UpsertEmbedInput {
  attributes: JSON
  description: String
  id: UUID
  name: String
  organizationId: UUID
  populistUrl: String
}

input UpsertIssueTagInput {
  category: String
  description: String
  id: UUID
  name: String
  slug: String
}

input UpsertOfficeInput {
  chamber: Chamber
  county: String
  district: String
  districtType: District
  electionScope: ElectionScope
  hospitalDistrict: String
  id: UUID
  municipality: String
  name: String
  officeType: String
  politicalScope: PoliticalScope
  priority: Int
  schoolDistrict: String
  seat: String
  slug: String
  state: State
  subtitle: String
  subtitleShort: String
  termLength: Int
  title: String
}

input UpsertOrganizationInput {
  assets: JSON
  description: String
  email: String
  facebookUrl: String
  headquartersAddressId: UUID
  headquartersPhone: String
  id: UUID
  instagramUrl: String
  issueTags: CreateOrConnectIssueTagInput
  name: String
  slug: String
  taxClassification: String
  thumbnailImageUrl: String
  twitterUrl: String
  votesmartSigId: Int
  websiteUrl: String
}

input UpsertPoliticianInput {
  assets: JSON
  biography: String
  biographySource: String
  campaignWebsiteUrl: String
  crpCandidateId: String
  dateOfBirth: NaiveDate
  email: String
  facebookUrl: String
  fecCandidateId: String
  firstName: String
  homeState: State
  id: UUID
  instagramUrl: String
  issueTags: CreateOrConnectIssueTagInput
  lastName: String
  legiscanPeopleId: Int
  linkedinUrl: String
  middleName: String
  officeId: UUID
  officialWebsiteUrl: String
  organizationEndorsements: CreateOrConnectOrganizationInput
  party: PoliticalParty
  phone: String
  politicianEndorsements: CreateOrConnectPoliticianInput
  preferredName: String
  raceLosses: Int
  raceWins: Int
  slug: String
  suffix: String
  thumbnailImageUrl: String
  tiktokUrl: String
  twitterUrl: String
  upcomingRaceId: UUID
  votesmartCandidateBio: JSON
  votesmartCandidateId: Int
  votesmartCandidateRatings: JSON
  youtubeUrl: String
}

input UpsertRaceInput {
  ballotpediaLink: String
  description: String
  earlyVotingBeginsDate: NaiveDate
  electionId: UUID
  id: UUID
  isSpecialElection: Boolean!
  numElect: Int
  officeId: UUID
  officialWebsite: String
  party: PoliticalParty
  raceType: RaceType
  slug: String
  state: State
  title: String
  totalVotes: Int
  winnerIds: [UUID!]
}

input UpsertVotingGuideCandidateInput {
  candidateId: ID!
  isEndorsement: Boolean
  note: String
  votingGuideId: ID!
}

input UpsertVotingGuideInput {
  description: String
  electionId: ID!
  id: ID
  title: String
}

input UserCountFilter {
  state: State
}

type UserResult {
  address: AddressResult
  addressExtendedMn: AddressExtendedMNResult
  email: String!
  firstName: String
  id: ID!
  lastName: String
  profilePictureUrl: String
  username: String!
}

type Vote {
  absent: Int!
  chamber: String!
  chamberId: Int!
  date: String!
  desc: String!
  nay: Int!
  nv: Int!
  passed: Int!
  """
  This field is not returned from get_bill, but can be populated with a subsequent call to `get_roll_call`
  """
  rollCallData: RollCall
  rollCallId: Int!
  stateLink: String!
  total: Int!
  url: String!
  yea: Int!
}

type VotingGuideCandidateResult {
  candidateId: ID!
  isEndorsement: Boolean!
  note: String
  politician: PoliticianResult!
}

type VotingGuideResult {
  candidates: [VotingGuideCandidateResult!]!
  description: String
  election: ElectionResult!
  electionId: ID!
  id: ID!
  title: String
  user: UserResult!
  userId: ID!
}

type VsRating {
  categories: JSON!
  rating: JSON!
  ratingId: JSON
  ratingName: String!
  ratingText: String!
  sigId: JSON!
  timespan: JSON!
}