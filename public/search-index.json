[
  {
    "label": "What is Populist?",
    "href": "/docs/content/overview",
    "content": "import { DocsLayout } from \"components\";\n\n## Populist helps you create civic content\n\n### What is Civic Content?\n\nCivic content is information that helps people understand and engage\nwith their communities. It can be news, events, or discussions about\nlocal issues. Civic content is important because it helps people make\ninformed decisions and participate in their communities.\n\nexport default function DocsContentOverview({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Populist helps you create civic content",
        "level": 2
      },
      {
        "text": "What is Civic Content?",
        "level": 3
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "Legislation",
    "href": "/docs/content/legislation",
    "content": "import { DocsLayout } from \"components\";\nimport { getEmbedConfig } from \"utils/constants\";\nimport { BillWidget } from \"components/BillWidget/BillWidget\";\n\n# Legislation\n\nLegislation embeds give the latest information about bills as they move through the legislature. They help audiences easily understand what the legislation is about, who is involved, and where the bill is currently in the process of becoming law. Legislation embeds also capture engagement by allowing audiences to vote on whether they support, oppose, or are undecided on a bill. Below are the types of information on each legislation embed.\n\n<BillWidget\n  embedId={getEmbedConfig()[\"legislation\"].embedId}\n  billId={getEmbedConfig()[\"legislation\"].billId}\n  origin={window.location.origin}\n  renderOptions={{}}\n/>\n\n### Issue Tags\n\nIssue tags offer a quick way to show the subject matter of legislation through our categories.\n\n### Summary\n\nThese summaries are AI-generated and reviewed by Populist staff to make sure they are accurate and representative.\n\n### Full Text Link\n\nIf audiences want to dive deeper, we provide links to the full text of legislation on the official government website.\n\n### Status\n\nThe status area shows where a bill is in the process of becoming law.\n\n### Latest votes\n\nIf legislation has been voted on in one or both chambers, the latest vote totals will be shown here.\n\n### Sponsors\n\nThe sponsors section shows the partisan breakdown of the authors of a bill.\n\n### Public voting\n\nPublic voting is a way to gauge sentiment on legislation. Audiences can share whether they support, oppose, or are undecided on legislation, and see how others have responded. Public voting can be configured either to allow anonymous responses, or to require names and emails that are only shared with the organization.\n\nexport default function DocsLegislation({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Legislation",
        "level": 1
      },
      {
        "text": "Issue Tags",
        "level": 3
      },
      {
        "text": "Summary",
        "level": 3
      },
      {
        "text": "Full Text Link",
        "level": 3
      },
      {
        "text": "Status",
        "level": 3
      },
      {
        "text": "Latest votes",
        "level": 3
      },
      {
        "text": "Sponsors",
        "level": 3
      },
      {
        "text": "Public voting",
        "level": 3
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Legislation Tracker",
    "href": "/docs/content/legislation-tracker",
    "content": "import { DocsLayout } from \"components\";\nimport { getEmbedConfig } from \"utils/constants\";\nimport { BillTrackerWidget } from \"components/BillTrackerWidget/BillTrackerWidget\";\n\n# Legislation Tracker\n\n<BillTrackerWidget\n  embedId={getEmbedConfig()[\"legislation-tracker\"].embedId}\n  billIds={getEmbedConfig()[\"legislation-tracker\"].billIds}\n  origin={window.location.origin}\n  renderOptions={{}}\n/>\n\nexport default function DocsLegislationTracker({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Legislation Tracker",
        "level": 1
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Politician",
    "href": "/docs/content/politician",
    "content": "import { DocsLayout } from \"components\";\nimport { getEmbedConfig } from \"utils/constants\";\nimport { PoliticianEmbed } from \"components/PoliticianEmbed/PoliticianEmbed\";\n\n# Politician\n\n<PoliticianEmbed\n  embedId={getEmbedConfig()[\"politician\"].embedId}\n  politicianId={getEmbedConfig()[\"politician\"].politicianId}\n  origin={window.location.origin}\n  renderOptions={{}}\n/>\n\nexport default function DocsPolitician({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Politician",
        "level": 1
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Candidate Guide",
    "href": "/docs/content/candidate-guide",
    "content": "import { DocsLayout } from \"components\";\nimport { getEmbedConfig } from \"utils/constants\";\nimport { CandidateGuideEmbed } from \"components/CandidateGuideEmbed/CandidateGuideEmbed\";\n\n# Candidate Guide\n\nCandidate guides display information about candidates and their responses to your specific questions.\n\n<CandidateGuideEmbed\n  embedId={getEmbedConfig()[\"candidate-guide\"].embedId}\n  candidateGuideId={getEmbedConfig()[\"candidate-guide\"].candidateGuideId}\n  origin={window.location.origin}\n  renderOptions={{}}\n/>\n\nexport default function DocsCandidateGuides({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Candidate Guide",
        "level": 1
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Race",
    "href": "/docs/content/race",
    "content": "import { DocsLayout } from \"components\";\nimport { RaceWidget } from \"components/RaceWidget/RaceWidget\";\nimport { getEmbedConfig } from \"utils/constants\";\n\n# Race\n\nRace embeds display information about a given race for a specific office, including the office name and details, and a list of candidates running for that office.\n\n<RaceWidget\n  embedId={getEmbedConfig()[\"race\"].embedId}\n  raceId={getEmbedConfig()[\"race\"].raceId}\n  origin={window.location.origin}\n  renderOptions={{}}\n/>\n\n## Live Results\n\nOn election night, Populist Race embeds will display live voting results as they are reported. The results will update automatically as new data is available.\n\nexport default function DocsRace({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Race",
        "level": 1
      },
      {
        "text": "Live Results",
        "level": 2
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Question",
    "href": "/docs/content/question",
    "content": "import { DocsLayout } from \"components\";\nimport { QuestionWidget } from \"components/QuestionWidget/QuestionWidget\";\nimport { getEmbedConfig } from \"utils/constants\";\n\n# Question\n\n<QuestionWidget\n  embedId={getEmbedConfig()[\"question\"].embedId}\n  origin={window.location.origin}\n/>\n\nexport default function DocsQuestion({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Question",
        "level": 1
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "Poll",
    "href": "/docs/content/poll",
    "content": "import { DocsLayout } from \"components\";\nimport { PollWidget } from \"components/PollWidget/PollWidget\";\nimport { getEmbedConfig } from \"utils/constants\";\n\n# Poll\n\n**Poll embeds** allow you to ask your audience a question and respond from a set of predefined answers, with the option to allow the respondent to write in their own response.\n\n<PollWidget embedId={getEmbedConfig()[\"poll\"].embedId} origin={null} />\n\nexport default function DocsPoll({ children }) {\n  return <DocsLayout currentPage=\"content\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Poll",
        "level": 1
      }
    ],
    "tabId": "content",
    "tabLabel": "Embed Content",
    "tabColor": "aqua",
    "section": "Content Types"
  },
  {
    "label": "What is a conversation?",
    "href": "/docs/conversations/overview",
    "content": "import { DocsLayout } from \"components\";\n\n## What is a Conversation?\n\nPopulist's **Conversations** is an open-source platform that helps large groups share and understand their collective views. It is an implementation of a [Wikisurvey](https://en.wikipedia.org/wiki/Wiki_survey) and inspired by other platforms including [Pol.is](https://pol.is) with a few key improvements.\n\nWhen using Populist conversations, people write short comments and then vote on other people's comments by selecting support, oppose, or neutral. The system shows comments to voters in a semi-random way to ensure broad exposure of ideas.\n\nWhat makes this different from regular surveys:\n\n- Participants create the content themselves instead of answering preset questions\n- People can contribute meaningfully without having to vote on everything\n- The system works efficiently even with hundreds, thousands, or potentially millions of participants\n\n#### Participating in Conversations\n\nBrowse through the list of existing conversations to find topics that interest you. Click on a conversation to view the discussion and contribute your thoughts and opinions.\n\n#### Managing Conversations\n\nOrganization administrators have the ability to manage conversations, including editing or deleting conversations as needed. This ensures that discussions remain relevant and appropriate for the organization.\n\nexport default function DocsConversationsOverview({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "What is a Conversation?",
        "level": 2
      },
      {
        "text": "Participating in Conversations",
        "level": 4
      },
      {
        "text": "Managing Conversations",
        "level": 4
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "Quickstart",
    "href": "/docs/conversations/quickstart",
    "content": "import { ReactNode } from \"react\";\nimport { DocsLayout, OrganizationDashboardLink } from \"components\";\n\n# Quickstart\n\n1. Access the conversations feature by navigating to conversations on your <OrganizationDashboardLink text=\"organization's dashboard.\" />.\n\n2. Click the \"Create New Conversation\" button to create a new conversation.\n\n3. Set a topic and optional description for the conversation.\n\n4. Optionally add seed statements to provide initial context or ideas for the discussion.\n\n5. Click on \"Manage\" then \"Copy Public URL\" to distribute a link to the conversation.\n\n6. From the \"Manage\" tab you'll be able to monitor the conversation in realtime.\n\n7. Use the \"Moderate\" tab to manage comments and seed statements.\n\nexport default function DocsConversationsQuickstart({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Quickstart",
        "level": 1
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "Configuration",
    "href": "/docs/conversations/configuration",
    "content": "import { DocsLayout } from \"components\";\n\n## Configuring a Conversation\n\nThe conversation owner can configure the conversation settings to suit their needs. The following settings are available:\n\n#### Conversation Title\n\nThe title of the conversation is displayed at the top of the conversation page. Choose a title that is descriptive and engaging to attract participants.\n\n#### Conversation Description\n\nThe description provides additional context for the conversation. Use the description to explain the purpose of the conversation and provide guidelines for participants.\n\n#### Seed Statements\n\nSeed statements are initial statements or questions that provide context for the conversation. Add seed statements to prompt participants to engage with the conversation.\n\nexport default function DocsConversationsConfiguration({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Configuring a Conversation",
        "level": 2
      },
      {
        "text": "Conversation Title",
        "level": 4
      },
      {
        "text": "Conversation Description",
        "level": 4
      },
      {
        "text": "Seed Statements",
        "level": 4
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Usage"
  },
  {
    "label": "Distribution",
    "href": "/docs/conversations/distribution",
    "content": "import { DocsLayout, Divider } from \"components\";\n\n## Distributing a Conversation\n\nThe conversation owner can distribute the conversation to participants using the following methods:\n\n#### Direct Link\n\nShare the conversation link with participants via email, social media, or other communication channels. Participants can access the conversation by clicking the link.\n\n#### Embed Code (Coming Soon)\n\nEmbed the conversation on your website using the provided embed code. Participants can engage with the conversation directly on your website.\n\n<Divider />\n\n## Marketing\n\nPromote the conversation to attract participants and increase engagement. Consider the following marketing strategies:\n\n#### Email list\n\nSend an email to your subscribers inviting them to participate in the conversation. Include a brief description of the conversation and a call-to-action to join.\n\n#### Social media\n\nShare the conversation link on your social media channels to reach a wider audience. Use engaging visuals and captions to attract participants.\n\n#### Paid Ads\n\nConsider running paid ads to promote the conversation to a targeted audience. Use platforms like Google Ads or Facebook Ads to reach potential participants.\n\nexport default function DocsConversationsDistribution({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Distributing a Conversation",
        "level": 2
      },
      {
        "text": "Direct Link",
        "level": 4
      },
      {
        "text": "Embed Code (Coming Soon)",
        "level": 4
      },
      {
        "text": "Marketing",
        "level": 2
      },
      {
        "text": "Email list",
        "level": 4
      },
      {
        "text": "Social media",
        "level": 4
      },
      {
        "text": "Paid Ads",
        "level": 4
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Usage"
  },
  {
    "label": "Moderation",
    "href": "/docs/conversations/moderation",
    "content": "import { DocsLayout } from \"components\";\n\n## Moderation\n\nThe conversation owner controls moderation through the admin interface.\nEach new comment can be approved, rejected, or left unmoderated. While\nConversations work without moderation, moderating effectively saves\nparticipants' time by removing irrelevant content.\n\n## Moderation Schemes\n\nStrict Moderation (Default) Works like a whitelist Comments only appear\nafter moderator approval. Recommended when embedding on your website to\nprevent inappropriate content. Permissive Moderation Works like a\nblacklist Comments appear immediately Can be removed later by moderators\nYou can switch between these in the conversation's admin configuration.\n\nexport default function DocsConversationsModeration({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Moderation",
        "level": 2
      },
      {
        "text": "Moderation Schemes",
        "level": 2
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Usage"
  },
  {
    "label": "Monitoring",
    "href": "/docs/conversations/monitoring",
    "content": "import { DocsLayout } from \"components\";\n\n## Monitoring\n\nYou can monitor a live conversation in real time using a conversations\n\"Manage\" page. Here you can see the number of participants, votes,\nstatements, and more.\n\nexport default function DocsConversationsMonitoring({ children }) {\n  return <DocsLayout currentPage=\"conversations\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "Monitoring",
        "level": 2
      }
    ],
    "tabId": "conversations",
    "tabLabel": "Conversations",
    "tabColor": "aqua",
    "section": "Usage"
  },
  {
    "label": "Introduction",
    "href": "/docs/api/introduction",
    "content": "import { Divider, DocsLayout, CodeBlock } from \"components\";\n\n# API Reference\n\n<Divider />\n## Introducing: The Populist public API\n\nThe Populist public API provides access to the Populist platform's\nfeatures and data. You can use the API to consume data about elections,\npoliticians, bills and more.\n\n### GraphQL\n\nThe Populist public API is built on GraphQL, a query language for your\nAPI. You can use GraphQL to query the Populist platform for the specific\ndata you need.\n\nA query to the Populist API could looks something like this:\n\n<CodeBlock\n  code={`query {\n    elections(filter: { state: CO }) {\n      title\n      description\n      electionDate\n    }\n}`}\n  language=\"graphql\"\n/>\n\nexport default function DocsApiIntroduction({ children }) {\n  return <DocsLayout currentPage=\"api\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "API Reference",
        "level": 1
      },
      {
        "text": "Introducing: The Populist public API",
        "level": 2
      },
      {
        "text": "GraphQL",
        "level": 3
      }
    ],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "Quickstart",
    "href": "/docs/api/quickstart",
    "content": "import { Divider, DocsLayout, CodeBlock } from \"components\";\nimport styles from \"components/DocsLayout/DocsLayout.module.scss\";\n\n# API Reference\n\n<Divider />\n## Quickstart\n\nMaking a request to the Populist API is easy! To get started quickly, copy this snippet into your terminal and run it:\n\n<CodeBlock\n  code={`curl 'https://api.populist.us' -H 'Content-Type: application/json' -X POST -d '{\"query\": \"query { elections(filter: { state: CO }) { title description electionDate } }\"}'`}\n  language=\"bash\"\n/>\n\nThis will return a list of upcoming elections in Colorado. You can modify the `filter` object to query elections in other states or filter by other fields. For more information on the available fields and filters, check out the [API Reference](/docs/api/reference). Your output should looks something like this:\n\n<pre className={styles.jsonBlock}>\n  {`{\n  \"data\": {\n    \"elections\": [\n      {\n        \"title\": \"Colorado Primaries\",\n        \"description\": \"Primary races for the general election later this year on November 8, 2022.\",\n        \"electionDate\": \"2022-06-28\"\n      },\n      {\n        \"title\": \"General Election\",\n        \"description\": \"During this midterm election year, all 435 seats in the U.S. House of Representatives and 35 of the 100 seats in the U.S. Senate will be contested. This will be the first election affected by the redistricting following the 2020 census.\",\n        \"electionDate\": \"2022-11-08\"\n      },\n      {\n        \"title\": \"Municipal General Election\",\n        \"description\": \"\",\n        \"electionDate\": \"2023-04-04\"\n      },\n      {\n        \"title\": \"General Runoff Election\",\n        \"description\": \"Michael Johnston defeated Kelly Brough in the general runoff election for Mayor of Denver on June 6, 2023.\",\n        \"electionDate\": \"2023-06-06\"\n      },\n      {\n        \"title\": \"Primary & Special Elections\",\n        \"description\": null,\n        \"electionDate\": \"2023-08-08\"\n      },\n      {\n        \"title\": \"General Election\",\n        \"description\": \"This off-year election includes mostly local elections, with a few state level ones.\",\n        \"electionDate\": \"2023-11-07\"\n      },\n      {\n        \"title\": \"Colorado Primaries 2024\",\n        \"description\": \"Primary races in Colorado for the upcoming general election on November 5, 2024\",\n        \"electionDate\": \"2024-06-25\"\n      },\n      {\n        \"title\": \"General Election 2024\",\n        \"description\": \"This year's election includes the presidential election as well as all 435 seats in the U.S. House of Representatives and 33 seats in the U.S. Senate.\",\n        \"electionDate\": \"2024-11-05\"\n      }\n    ]\n  }\n}`}\n</pre>\n\nexport default function DocsGuidesQuickStart({ children }) {\n  return <DocsLayout currentPage=\"api\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "API Reference",
        "level": 1
      },
      {
        "text": "Quickstart",
        "level": 2
      }
    ],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "Authentication",
    "href": "/docs/api/auth",
    "content": "import { Divider } from \"components\";\nimport { DocsLayout } from \"components\";\n\n# API Reference\n\n<Divider />\n## Authentication\n\nThe Populist public API requires an `authorization` header to be set with your request using your API\nkey like so:\n\n```json\n\"authorization\": \"Bearer YOUR_API_KEY\"\n```\n\nIf you do not have an API key, you can request one by contacting us at\n[info@populist.us](mailto:info@populist.us)\n\nexport default function DocsApiAuth({ children }) {\n  return <DocsLayout currentPage=\"api\">{children}</DocsLayout>;\n}\n",
    "headings": [
      {
        "text": "API Reference",
        "level": 1
      },
      {
        "text": "Authentication",
        "level": 2
      }
    ],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Overview"
  },
  {
    "label": "allIssueTags",
    "href": "/docs/api/queries#allIssueTags",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "ballotMeasureById",
    "href": "/docs/api/queries#ballotMeasureById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "ballotMeasures",
    "href": "/docs/api/queries#ballotMeasures",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billById",
    "href": "/docs/api/queries#billById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billBySlug",
    "href": "/docs/api/queries#billBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billCommittees",
    "href": "/docs/api/queries#billCommittees",
    "content": "Returns all committees that have an associated bill",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billIssueTags",
    "href": "/docs/api/queries#billIssueTags",
    "content": "Returns all issue tags that have an associated bill",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billYears",
    "href": "/docs/api/queries#billYears",
    "content": "Returns all session years that have an associated bill",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "bills",
    "href": "/docs/api/queries#bills",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "billsByIds",
    "href": "/docs/api/queries#billsByIds",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "candidateGuideById",
    "href": "/docs/api/queries#candidateGuideById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "candidateGuidesByOrganization",
    "href": "/docs/api/queries#candidateGuidesByOrganization",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "countiesByState",
    "href": "/docs/api/queries#countiesByState",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "electionById",
    "href": "/docs/api/queries#electionById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "electionBySlug",
    "href": "/docs/api/queries#electionBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "electionVotingGuideByUserId",
    "href": "/docs/api/queries#electionVotingGuideByUserId",
    "content": "Returns a single voting guide for the given election and user",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "elections",
    "href": "/docs/api/queries#elections",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "electionsByUser",
    "href": "/docs/api/queries#electionsByUser",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "health",
    "href": "/docs/api/queries#health",
    "content": "Returns `true` to indicate the GraphQL server is reachable",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "issueTagBySlug",
    "href": "/docs/api/queries#issueTagBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "issueTags",
    "href": "/docs/api/queries#issueTags",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "nextElection",
    "href": "/docs/api/queries#nextElection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "officeById",
    "href": "/docs/api/queries#officeById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "officeBySlug",
    "href": "/docs/api/queries#officeBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "offices",
    "href": "/docs/api/queries#offices",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "organizationById",
    "href": "/docs/api/queries#organizationById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "organizationBySlug",
    "href": "/docs/api/queries#organizationBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "organizations",
    "href": "/docs/api/queries#organizations",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicalParties",
    "href": "/docs/api/queries#politicalParties",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicianById",
    "href": "/docs/api/queries#politicianById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicianByIntakeToken",
    "href": "/docs/api/queries#politicianByIntakeToken",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicianBySlug",
    "href": "/docs/api/queries#politicianBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicianRespondentsByOrganizationId",
    "href": "/docs/api/queries#politicianRespondentsByOrganizationId",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "politicians",
    "href": "/docs/api/queries#politicians",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "questionById",
    "href": "/docs/api/queries#questionById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "raceById",
    "href": "/docs/api/queries#raceById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "raceBySlug",
    "href": "/docs/api/queries#raceBySlug",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "races",
    "href": "/docs/api/queries#races",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "recentCandidateGuideQuestionSubmissionsByOrganization",
    "href": "/docs/api/queries#recentCandidateGuideQuestionSubmissionsByOrganization",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "relatedQuestionSubmissionByCandidateAndQuestion",
    "href": "/docs/api/queries#relatedQuestionSubmissionByCandidateAndQuestion",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "respondentsByOrganizationId",
    "href": "/docs/api/queries#respondentsByOrganizationId",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "submissions",
    "href": "/docs/api/queries#submissions",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "userCount",
    "href": "/docs/api/queries#userCount",
    "content": "Get all users",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "userProfile",
    "href": "/docs/api/queries#userProfile",
    "content": "Publicly accessible user information",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "votingGuideById",
    "href": "/docs/api/queries#votingGuideById",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "votingGuidesByIds",
    "href": "/docs/api/queries#votingGuidesByIds",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "votingGuidesByUserId",
    "href": "/docs/api/queries#votingGuidesByUserId",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Queries"
  },
  {
    "label": "AddressInput",
    "href": "/docs/api/types#AddressInput",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Input Types"
  },
  {
    "label": "String",
    "href": "/docs/api/types#String",
    "content": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "ID",
    "href": "/docs/api/types#ID",
    "content": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "Int",
    "href": "/docs/api/types#Int",
    "content": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "Boolean",
    "href": "/docs/api/types#Boolean",
    "content": "The `Boolean` scalar type represents `true` or `false`.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "Float",
    "href": "/docs/api/types#Float",
    "content": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "DateTime",
    "href": "/docs/api/types#DateTime",
    "content": "Implement the DateTime<Utc> scalar\n\nThe input/output is a string in RFC3339 format.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "JSON",
    "href": "/docs/api/types#JSON",
    "content": "A scalar that can represent any JSON value.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "NaiveDate",
    "href": "/docs/api/types#NaiveDate",
    "content": "ISO 8601 calendar date without timezone.\nFormat: %Y-%m-%d\n\n# Examples\n\n* `1994-11-13`\n* `2000-02-24`",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "UUID",
    "href": "/docs/api/types#UUID",
    "content": "A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as\nStrings within GraphQL. UUIDs are used to assign unique identifiers to\nentities without requiring a central allocating authority.\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Scalars"
  },
  {
    "label": "ArgumentPosition",
    "href": "/docs/api/types#ArgumentPosition",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "AuthorType",
    "href": "/docs/api/types#AuthorType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "BallotMeasureStatus",
    "href": "/docs/api/types#BallotMeasureStatus",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "BillStatus",
    "href": "/docs/api/types#BillStatus",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "BillType",
    "href": "/docs/api/types#BillType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "Chamber",
    "href": "/docs/api/types#Chamber",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "Chambers",
    "href": "/docs/api/types#Chambers",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "DistrictType",
    "href": "/docs/api/types#DistrictType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "ElectionScope",
    "href": "/docs/api/types#ElectionScope",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "EmbedType",
    "href": "/docs/api/types#EmbedType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "PoliticalScope",
    "href": "/docs/api/types#PoliticalScope",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "PopularitySort",
    "href": "/docs/api/types#PopularitySort",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "RaceType",
    "href": "/docs/api/types#RaceType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "Sentiment",
    "href": "/docs/api/types#Sentiment",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "State",
    "href": "/docs/api/types#State",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "VoteType",
    "href": "/docs/api/types#VoteType",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Enums"
  },
  {
    "label": "ArgumentResult",
    "href": "/docs/api/types#ArgumentResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "AuthorResult",
    "href": "/docs/api/types#AuthorResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BallotMeasureFilter",
    "href": "/docs/api/types#BallotMeasureFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BallotMeasureResult",
    "href": "/docs/api/types#BallotMeasureResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BallotMeasureSort",
    "href": "/docs/api/types#BallotMeasureSort",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Bill",
    "href": "/docs/api/types#Bill",
    "content": "Legiscan Bill object",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillAmendment",
    "href": "/docs/api/types#BillAmendment",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillFilter",
    "href": "/docs/api/types#BillFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillResult",
    "href": "/docs/api/types#BillResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillSession",
    "href": "/docs/api/types#BillSession",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillSort",
    "href": "/docs/api/types#BillSort",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillSupplement",
    "href": "/docs/api/types#BillSupplement",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BillVote",
    "href": "/docs/api/types#BillVote",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Calendar",
    "href": "/docs/api/types#Calendar",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Candidate",
    "href": "/docs/api/types#Candidate",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "CandidateGuideRaceResult",
    "href": "/docs/api/types#CandidateGuideRaceResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "CandidateGuideResult",
    "href": "/docs/api/types#CandidateGuideResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "CommitteeResult",
    "href": "/docs/api/types#CommitteeResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "CommonWordsResult",
    "href": "/docs/api/types#CommonWordsResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Coordinates",
    "href": "/docs/api/types#Coordinates",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "DonationsByIndustry",
    "href": "/docs/api/types#DonationsByIndustry",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "DonationsSummary",
    "href": "/docs/api/types#DonationsSummary",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "ElectionFilter",
    "href": "/docs/api/types#ElectionFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "ElectionRaceFilter",
    "href": "/docs/api/types#ElectionRaceFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "ElectionResult",
    "href": "/docs/api/types#ElectionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "EmbedResult",
    "href": "/docs/api/types#EmbedResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Endorsements",
    "href": "/docs/api/types#Endorsements",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "GeneralInfo",
    "href": "/docs/api/types#GeneralInfo",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "GetCandidateBioResponse",
    "href": "/docs/api/types#GetCandidateBioResponse",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Heartbeat",
    "href": "/docs/api/types#Heartbeat",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "History",
    "href": "/docs/api/types#History",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "IssueTagResult",
    "href": "/docs/api/types#IssueTagResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "IssueTagSearch",
    "href": "/docs/api/types#IssueTagSearch",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Office",
    "href": "/docs/api/types#Office",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OfficeFilter",
    "href": "/docs/api/types#OfficeFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OfficeResult",
    "href": "/docs/api/types#OfficeResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OrganizationAssets",
    "href": "/docs/api/types#OrganizationAssets",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OrganizationAttributes",
    "href": "/docs/api/types#OrganizationAttributes",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OrganizationPoliticianNoteResult",
    "href": "/docs/api/types#OrganizationPoliticianNoteResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OrganizationResult",
    "href": "/docs/api/types#OrganizationResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "OrganizationSearch",
    "href": "/docs/api/types#OrganizationSearch",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PageInfo",
    "href": "/docs/api/types#PageInfo",
    "content": "Information about pagination in a connection",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PoliticalParty",
    "href": "/docs/api/types#PoliticalParty",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PoliticianAssets",
    "href": "/docs/api/types#PoliticianAssets",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PoliticianFilter",
    "href": "/docs/api/types#PoliticianFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PoliticianResult",
    "href": "/docs/api/types#PoliticianResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PollOptionResult",
    "href": "/docs/api/types#PollOptionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PollResult",
    "href": "/docs/api/types#PollResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PollSubmissionResult",
    "href": "/docs/api/types#PollSubmissionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Progress",
    "href": "/docs/api/types#Progress",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "PublicVotes",
    "href": "/docs/api/types#PublicVotes",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "QuestionResult",
    "href": "/docs/api/types#QuestionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "QuestionSubmissionResult",
    "href": "/docs/api/types#QuestionSubmissionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "QuestionSubmissionsFilter",
    "href": "/docs/api/types#QuestionSubmissionsFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RaceCandidateResult",
    "href": "/docs/api/types#RaceCandidateResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RaceFilter",
    "href": "/docs/api/types#RaceFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RaceResult",
    "href": "/docs/api/types#RaceResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RaceResultsResult",
    "href": "/docs/api/types#RaceResultsResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RatingResult",
    "href": "/docs/api/types#RatingResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Referral",
    "href": "/docs/api/types#Referral",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RespondentResult",
    "href": "/docs/api/types#RespondentResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RollCall",
    "href": "/docs/api/types#RollCall",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "RollCallVote",
    "href": "/docs/api/types#RollCallVote",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Sast",
    "href": "/docs/api/types#Sast",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Sector",
    "href": "/docs/api/types#Sector",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "SentimentCountResult",
    "href": "/docs/api/types#SentimentCountResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "SessionResult",
    "href": "/docs/api/types#SessionResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Sponsor",
    "href": "/docs/api/types#Sponsor",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Subject",
    "href": "/docs/api/types#Subject",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "SubmissionCountByDateResult",
    "href": "/docs/api/types#SubmissionCountByDateResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "Text",
    "href": "/docs/api/types#Text",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "UserCountFilter",
    "href": "/docs/api/types#UserCountFilter",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "UserResult",
    "href": "/docs/api/types#UserResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "VotingGuideCandidateResult",
    "href": "/docs/api/types#VotingGuideCandidateResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "VotingGuideResult",
    "href": "/docs/api/types#VotingGuideResult",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "VsRating",
    "href": "/docs/api/types#VsRating",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Models"
  },
  {
    "label": "BallotMeasureResultConnection",
    "href": "/docs/api/types#BallotMeasureResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "BallotMeasureResultEdge",
    "href": "/docs/api/types#BallotMeasureResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "BillResultConnection",
    "href": "/docs/api/types#BillResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "BillResultEdge",
    "href": "/docs/api/types#BillResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "OfficeResultConnection",
    "href": "/docs/api/types#OfficeResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "OfficeResultEdge",
    "href": "/docs/api/types#OfficeResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "OrganizationResultConnection",
    "href": "/docs/api/types#OrganizationResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "OrganizationResultEdge",
    "href": "/docs/api/types#OrganizationResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "PoliticianResultConnection",
    "href": "/docs/api/types#PoliticianResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "PoliticianResultEdge",
    "href": "/docs/api/types#PoliticianResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RaceResultConnection",
    "href": "/docs/api/types#RaceResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RaceResultEdge",
    "href": "/docs/api/types#RaceResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RatingResultConnection",
    "href": "/docs/api/types#RatingResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RatingResultEdge",
    "href": "/docs/api/types#RatingResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RespondentResultConnection",
    "href": "/docs/api/types#RespondentResultConnection",
    "content": "",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  },
  {
    "label": "RespondentResultEdge",
    "href": "/docs/api/types#RespondentResultEdge",
    "content": "An edge in a connection.",
    "headings": [],
    "tabId": "api",
    "tabLabel": "API Reference",
    "tabColor": "aqua",
    "section": "Connections"
  }
]